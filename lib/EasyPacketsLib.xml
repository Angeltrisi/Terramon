<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasyPacketsLib</name>
    </assembly>
    <members>
        <member name="T:EasyPacketsLib.EasyPacketDLL">
            <summary>
                Methods for using the library as a DLL reference instead of as a mod reference.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.EasyPacketDLL.RegisterMod(Terraria.ModLoader.Mod)">
            <summary>
                Register easy packets and handlers of the provided mod.
                If registering multiple mods, ensure the order is the same across clients.
                <example>
                    <code>public override void Load() => EasyPacketDLL.RegisterMod(this);</code>
                </example>
            </summary>
            <param name="mod">Mod to load the types from.</param>
        </member>
        <member name="M:EasyPacketsLib.EasyPacketDLL.Unload">
            <summary>
                Clear static references when the mod is unloaded.
                It is recommended to call this so that references are properly cleared.
                <example>
                    <code>public override void Unload() => EasyPacketDLL.Unload();</code>
                </example>
            </summary>
        </member>
        <member name="M:EasyPacketsLib.EasyPacketDLL.HandlePacket(System.IO.BinaryReader,System.Int32)">
            <summary>
                Handle incoming easy packets.
                <example>
                    <code>public override void HandlePacket(BinaryReader reader, int whoAmI) => EasyPacketDLL.HandlePacket(reader, whoAmI);</code>
                </example>
            </summary>
        </member>
        <member name="T:EasyPacketsLib.EasyPacketExtensions">
            <summary>
                Extension methods for sending easy packets and handling how they are received.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.EasyPacketExtensions.SendPacket``1(Terraria.ModLoader.Mod,``0@,System.Int32,System.Int32,System.Boolean)">
            <summary>
                Send an easy packet.
                If a packet is received but is unhandled, an error is raised.
            </summary>
            <example>
                <code>Mod.SendPacket(new ExamplePacket(10, 20));</code>
            </example>
            <param name="mod">Mod sending the packet.</param>
            <param name="packet">Packet instance that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</param>
            <param name="toClient">If non-negative, this packet will only be sent to the specified client.</param>
            <param name="ignoreClient">If non-negative, this packet will not be sent to the specified client.</param>
            <param name="forward">If sending from a client, this packet will be forwarded to other clients through the server.</param>
            <typeparam name="T">Type that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</typeparam>
        </member>
        <member name="M:EasyPacketsLib.EasyPacketExtensions.AddPacketHandler``1(Terraria.ModLoader.Mod,EasyPacketsLib.HandleEasyPacketDelegate{``0})">
            <summary>
                An easy packet handler is invoked when the packet is received.
                If a packet is received but is unhandled, an error is raised.
            </summary>
            <example>
                <code>
                    public class ExamplePacketHandler : ModSystem
                    {
                        public override void Load()
                        {
                            Mod.AddPacketHandler&lt;ExamplePacket&gt;(OnExamplePacketReceived);
                        }
            
                        public override void Unload()
                        {
                            Mod.RemovePacketHandler&lt;ExamplePacket&gt;(OnExamplePacketReceived);
                        }
            
                        private void OnExamplePacketReceived(in ExamplePacket packet, in SenderInfo sender, ref bool handled)
                        {
                            Mod.Logger.Debug($"X: {packet.X}, Y: {packet.Y}");
                            handled = true;
                        }
                    }
                </code>
            </example>
            <param name="mod">Mod handling the packet.</param>
            <param name="handler">Method handling the packet.</param>
            <typeparam name="T">Type that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</typeparam>
        </member>
        <member name="M:EasyPacketsLib.EasyPacketExtensions.RemovePacketHandler``1(Terraria.ModLoader.Mod,EasyPacketsLib.HandleEasyPacketDelegate{``0})">
            <summary>
                An easy packet handler is invoked when the packet is received.
                If a packet is received but is unhandled, an error is raised.
            </summary>
            <example>
                <code>
                    public class ExamplePacketHandler : ModSystem
                    {
                        public override void Load()
                        {
                            Mod.AddPacketHandler&lt;ExamplePacket&gt;(OnExamplePacketReceived);
                        }
            
                        public override void Unload()
                        {
                            Mod.RemovePacketHandler&lt;ExamplePacket&gt;(OnExamplePacketReceived);
                        }
            
                        private void OnExamplePacketReceived(in ExamplePacket packet, in SenderInfo sender, ref bool handled)
                        {
                            Mod.Logger.Debug($"X: {packet.X}, Y: {packet.Y}");
                            handled = true;
                        }
                    }
                </code>
            </example>
            <param name="mod">Mod handling the packet.</param>
            <param name="handler">Method handling the packet.</param>
            <typeparam name="T">Type that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</typeparam>
        </member>
        <member name="M:EasyPacketsLib.EasyPacketExtensions.Write``1(System.IO.BinaryWriter,``0@)">
            <summary>
                Serialise an easy packet.
            </summary>
            <param name="writer"></param>
            <param name="packet">Packet instance that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</param>
            <typeparam name="T">Type that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</typeparam>
        </member>
        <member name="M:EasyPacketsLib.EasyPacketExtensions.Read``1(System.IO.BinaryReader,EasyPacketsLib.SenderInfo@)">
            <summary>
                Deserialise an easy packet.
            </summary>
            <param name="reader"></param>
            <param name="sender">Information regarding the sender of the packet.</param>
            <typeparam name="T">Type that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</typeparam>
            <returns>Packet instance that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</returns>
        </member>
        <member name="T:EasyPacketsLib.HandleEasyPacketDelegate`1">
            <summary>
                Handle a received easy mod packet.
                If a packet is received but is unhandled, an error is raised.
            </summary>
            <param name="packet">Packet received.</param>
            <param name="sender">Information regarding the sender of the packet.</param>
            <param name="handled">An unhandled packet will raise an error.</param>
            <typeparam name="T">Type that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</typeparam>
            <example>
                <code>
                    private void OnExamplePacketReceived(in ExamplePacket packet, in SenderInfo sender, ref bool handled)
                    {
                        sender.Mod.Logger.Debug($"X: {packet.X}, Y: {packet.Y}");
                        handled = true;
                    }
                </code>
            </example>
        </member>
        <member name="T:EasyPacketsLib.IEasyPacketHandler`1">
            <summary>
                An easy solution for handled received easy packets.
                Implement on a struct, preferably a readonly struct.
                This can be implemented alongside <see cref="T:EasyPacketsLib.IEasyPacket`1" /> on the same type.
            </summary>
            <example>
                <code>
                    public readonly struct ExamplePacketHandler : IEasyPacketHandler&lt;ExamplePacket&gt;
                    {
                        void IEasyPacketHandler&lt;ExamplePacket&gt;.Receive(in ExamplePacket packet, in SenderInfo sender, ref bool handled)
                        {
                            sender.Mod.Logger.Debug($"X: {packet.X}, Y: {packet.Y}");
                            handled = true;
                        }
                    }
                </code>
            </example>
        </member>
        <member name="M:EasyPacketsLib.IEasyPacketHandler`1.Receive(`0@,EasyPacketsLib.SenderInfo@,System.Boolean@)">
            <summary>
                Handle a received easy mod packet.
                If a packet is received but is unhandled, an error is raised.
            </summary>
            <param name="packet">Packet received.</param>
            <param name="sender">Information regarding the sender of the packet.</param>
            <param name="handled">An unhandled packet will raise an error.</param>
            <example>
                <code>
                    void IEasyPacketHandler&lt;ExamplePacket&gt;.Receive(in ExamplePacket packet, in SenderInfo sender, ref bool handled)
                    {
                        sender.Mod.Logger.Debug($"X: {packet.X}, Y: {packet.Y}");
                        handled = true;
                    }
                </code>
            </example>
        </member>
        <member name="T:EasyPacketsLib.IEasyPacket`1">
            <summary>
                An easy solution for sending/receiving ModPackets with custom data.
                Implement on a struct, preferably a readonly struct.<br />
                Send the packet using <see cref="M:EasyPacketsLib.EasyPacketExtensions.SendPacket``1(Terraria.ModLoader.Mod,``0@,System.Int32,System.Int32,System.Boolean)" />.<br />
                Handle the packet using <see cref="M:EasyPacketsLib.EasyPacketExtensions.AddPacketHandler``1(Terraria.ModLoader.Mod,EasyPacketsLib.HandleEasyPacketDelegate{``0})" />.
            </summary>
            <example>
                <code>
                    public readonly struct ExamplePacket : IEasyPacket&lt;ExamplePacket&gt;
                    {
                        public readonly int X;
                        public readonly int Y;
            
                        public ExamplePacket(int x, int y)
                        {
                            X = x;
                            Y = y;
                        }
            
                        void IEasyPacket&lt;ExamplePacket&gt;.Serialise(BinaryWriter writer)
                        {
                            writer.Write(X);
                            writer.Write(Y);
                        }
            
                        ExamplePacket IEasyPacket&lt;ExamplePacket&gt;.Deserialise(BinaryReader reader, in SenderInfo sender)
                        {
                            return new ExamplePacket(reader.ReadInt32(), reader.ReadInt32());
                        }
                    }
                </code>
            </example>
        </member>
        <member name="M:EasyPacketsLib.IEasyPacket`1.Serialise(System.IO.BinaryWriter)">
            <summary>
                Serialise the packet data using the provided writer.
            </summary>
            <example>
                <code>
                    void IEasyPacket&lt;ExamplePacket&gt;.Serialise(BinaryWriter writer)
                    {
                        writer.Write(X);
                        writer.Write(Y);
                    }
                </code>
            </example>
        </member>
        <member name="M:EasyPacketsLib.IEasyPacket`1.Deserialise(System.IO.BinaryReader,EasyPacketsLib.SenderInfo@)">
            <summary>
                Deserialise the packet data using the provided reader.
                An error will be raised if not all data is read from the reader.
            </summary>
            <example>
                <code>
                    ExamplePacket IEasyPacket&lt;ExamplePacket&gt;.Deserialise(BinaryReader reader, in SenderInfo sender)
                    {
                        return new ExamplePacket(reader.ReadInt32(), reader.ReadInt32());
                    }
                </code>
            </example>
        </member>
        <member name="T:EasyPacketsLib.Internals.EasyPacket`1">
            <summary>
                Generic wrapper for an <see cref="T:EasyPacketsLib.IEasyPacket`1" /> type.
                Used to receive an incoming packet and detour it to the struct.
            </summary>
        </member>
        <member name="T:EasyPacketsLib.Internals.EasyPacketHandler`2">
            <summary>
                Generic wrapper for an <see cref="T:EasyPacketsLib.IEasyPacketHandler`1" /> type.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.IsRegistered``1">
            <summary>
                Check if an easy packet is registered.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.GetPacket(System.UInt16)">
            <summary>
                Get an easy packet type by its registered net ID.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.GetNetId``1">
            <summary>
                Get the registered net ID of an easy packet.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.AddHandler``1(EasyPacketsLib.HandleEasyPacketDelegate{``0})">
            <summary>
                Add an easy packet handler.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.RemoveHandler``1(EasyPacketsLib.HandleEasyPacketDelegate{``0})">
            <summary>
                Remove an easy packet handler.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.GetHandler``1">
            <summary>
                Get the handler for an easy packet.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.RegisterMod(Terraria.ModLoader.Mod)">
            <summary>
                Register easy packets and handlers of the provided mod.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.ClearStatics">
            <summary>
                Clear static references when the mod is unloaded.
            </summary>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.RegisterPacket(Terraria.ModLoader.Mod,System.Type)">
            <summary>
                Register an easy packet.
            </summary>
            <param name="mod">Mod that defined the easy packet.</param>
            <param name="type">Type that implements <see cref="T:EasyPacketsLib.IEasyPacket`1" />.</param>
        </member>
        <member name="M:EasyPacketsLib.Internals.EasyPacketLoader.RegisterHandler(Terraria.ModLoader.Mod,System.Type)">
            <summary>
                Register an easy packet handler.
            </summary>
            <param name="mod">Mod that defined the easy packet handler.</param>
            <param name="type">Type that implements <see cref="T:EasyPacketsLib.IEasyPacketHandler`1" />.</param>
        </member>
        <member name="P:EasyPacketsLib.Internals.EasyPacketLoader.NetEasyPacketCount">
            <summary>
                Total number of easy packets registered across all registered mods.
            </summary>
        </member>
        <member name="T:EasyPacketsLib.Internals.IEasyPacket">
            <summary>
                Implemented by <see cref="T:EasyPacketsLib.Internals.EasyPacket`1" /> as a non-generic wrapper for receiving an easy packet and detouring it
                to the struct.
            </summary>
        </member>
        <member name="T:EasyPacketsLib.Internals.IEasyPacketHandler">
            <summary>
                Implemented by <see cref="T:EasyPacketsLib.Internals.EasyPacketHandler`2" /> as a non-generic wrapper for handling a packet.
            </summary>
        </member>
        <member name="T:EasyPacketsLib.SenderInfo">
            <summary>
                Information regarding the sender of an easy packet that has been received.
            </summary>
        </member>
        <member name="F:EasyPacketsLib.SenderInfo.Mod">
            <summary>
                Mod that sent the packet.
            </summary>
        </member>
        <member name="F:EasyPacketsLib.SenderInfo.WhoAmI">
            <summary>
                Index of the player that sent the packet.
                If forwarded or sent by a client, this is the index of that client.
                If sent directly by the server, this is the index of the server (255).
            </summary>
        </member>
        <member name="P:EasyPacketsLib.SenderInfo.Forwarded">
            <summary>
                Packet is, or has been, forwarded by a client.
            </summary>
        </member>
        <member name="P:EasyPacketsLib.SenderInfo.ToClient">
            <summary>
                If non-negative, this packet will only be received by the specified client.
            </summary>
        </member>
        <member name="P:EasyPacketsLib.SenderInfo.IgnoreClient">
            <summary>
                If non-negative, this packet will not be received by the specified client.
            </summary>
        </member>
    </members>
</doc>
